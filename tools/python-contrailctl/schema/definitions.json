{
  "$schema": "http://json-schema.org/draft-04/schema#",
  "definitions": {
    "contrail_log_n_port_config": {
      "id": "contrail_log_n_port_config",
      "type": "object",
      "description": "log, introspect_port and listen_port configurations",
      "additionalProperties": false,
      "properties": {
        "log": {
          "description": "log file",
          "type": "string"
        },
        "log_level": {
          "description": "",
          "type": "string"
        },
        "introspect_port": {
          "description": "service introspect port",
          "type": "string"
        },
        "listen_port": {
          "description": "service listen port",
          "type": "string"
        }
      }
    },
    "cassandra_config": {
      "id": "cassandra",
      "type": "object",
      "description": "cassandra configuration section",
      "additionalProperties": false,
      "properties": {
        "commitlog_dir": {
          "description": "Directory to store commitlogs",
          "type": "string"
        },
        "data_dirs": {
          "description": "A list of directory locations where table data is stored",
          "type": "array"
        }
      }
    },
    "global_config": {
      "id": "global_config",
      "type": "object",
      "additionalProperties": false,
      "description": "Controller configuration GLOBAL section",
      "properties": {
        "log_level": {
          "description": "Default log_level",
          "type": "string",
          "enum": [
            "SYS_EMERG",
            "SYS_ALERT",
            "SYS_CRIT",
            "SYS_ERR",
            "SYS_WARN",
            "SYS_NOTICE",
            "SYS_INFO",
            "SYS_DEBUG"
          ]
        },
        "cloud_orchestrator": {
          "description": "cloud orchestrator is being used",
          "type": "string",
          "enum": [
            "openstack",
            "kubernetes",
            "mesos",
            "openshift",
            "vcenter"
          ]
        },
        "nested_mode": {
          "description": "Nested mode kubernetes or not",
          "type": "boolean"
        },
        "hosts_entries": {
          "description": "An optional dictionary of hostname and ip to write /etc/hosts entries",
          "type" : "object"
        },
        "ansible_test_mode": {
          "description": "parameter to tell ansible to test configuration code",
          "type": "boolean"
        },
        "external_lb": {
          "description": "Flag to identify the whether the loadbalancer is internaly or externally hosted",
          "type": "boolean"
        },
        "controller_nodes": {
          "description": "Comma seperated list of controller server IP addresses - this will be used to configure rabbitmq, zookeeper, cassandra servers in various contrail service configurations and configure load balancer for variuos contrail services that needed to be loadbalanced",
          "type": "string"
        },
        "controller_ip": {
          "description": "An IP address using which one can connect to all public services within controller container. This can be a virtual IP handled by load balancer in case of multi-node controllers.",
          "type": "string"
        },
        "config_ip": {
          "description": "IP Address to connect config api. Usually this is same as controller_ip and that is the default, but in case if you have set of controllers without configs then this ip can be different.",
          "type": "string"
        },
        "ceph_controller_nodes": {
          "description": "Comma seperated list of ceph controller server IP addresses - this will be used to serve ceph rest api request.",
          "type": "string"
        },
        "analytics_nodes": {
          "description": "Comma separated list of analytics server addresses",
          "type": "string"
        },
        "analytics_ip": {
          "description": "An IP address using which one can connect to analytics-api service within analytics container. This can be a virtual IP handled by load balancer in case of multi-node analytics. This will be configured in various contrail services configurations for connectting to contrail-analytics-api.",
          "type": "string"
        },
        "external_rabbitmq_servers": {
          "description": "Comma separated list of externally managed rabbitmq servers to be used for controller services.",
          "type": "string"
        },
        "external_zookeeper_servers": {
          "description": "Comma separated list of externally managed zookeeper servers to be used for controller services.",
          "type": "string"
        },
        "external_analyticsdb_zookeeper_servers": {
          "description": "List of externally managed zookeeper servers to be used for analyticsdb services.",
          "type": "array"
        },
        "external_configdb_servers": {
          "description": "Comma separated list of externally managed cassandra(configdb) servers to be used for controller services.",
          "type": "string"
        },
        "configdb_cassandra_user": {
          "description": "Cassandra username to access configdb",
          "type": "string"
        },
        "configdb_cassandra_password": {
          "description": "Cassandra password to access configb",
          "type": "string"
        },
        "enable_config_service": {
          "description": "Whether to enable config service or not, by default it is enabled",
          "type": "boolean"
        },
        "enable_control_service": {
          "description": "Whether to enable control service or not, by default it is enabled",
          "type": "boolean"
        },
        "enable_webui_service": {
          "description": "Whether to enable config_service or not, by default it is enabled",
          "type": "boolean"
        },
        "config_nodes": {
          "description": "While making config component optional within controller container, it fails the assumption that all nodes in controller_list has config running and thus need to set another optional entry to be configured in case config is not running on all controller nodes",
          "type": "string"
        },
        "webui_nodes": {
            "description": "List of Contrail WebUI IP Addresses, seperated by comma(,)",
            "type": "string"
        },
        "config_seeds": {
          "description": "config_seeds is to support adding new nodes to existing cluster, in which case config_seed_list is the list of existing servers in the cluster and this list will be used for various clusters like rabbitmq, cassandra to join new nodes to them",
          "type": "string"
        },
        "analyticsdb_seeds": {
          "description": "this is to support adding new nodes to existing cluster, in which case analyticsdb_seed_list is the list of existing servers in the cluster and this list will be used for various clusters like kafka, cassandra to join new nodes to them",
          "type": "string"
        },
        "analyticsdb_nodes": {
          "description": "Comma separated list of analyticsdb servers",
          "type": "string"
        },
        "compute_nodes": {
          "description": "Comma separated list of compute node list",
          "type": "string"
        },
        "xmpp_auth_enable": {
          "description": "Whether to enable contrail control and contrail vrouter agent to communicate over SSL",
          "type": "boolean"
        },
        "xmpp_dns_auth_enable": {
          "description": "Whether to enable contrail dns and contrail vrouter agent to communicate over SSL",
          "type": "boolean"
        },
        "uve_partition_count": {
          "description": "UVE data is partitioned to improve analytics performance, this configuration set number of partitions",
          "type": "string"
        },
        "sandesh_ssl_enable": {
          "description": "Whether to enable SSL for sandesh connection",
          "type": "boolean"
        },
        "introspect_ssl_enable": {
          "description": "Whether to enable SSL for introspect connection",
          "type": "boolean"
        },
        "apiserver_auth_protocol": {
          "description": "api-server auth protocol",
          "type": "string",
          "enum": [
            "http",
            "https"
          ]
        },
        "apiserver_certfile": {
          "description": "api-server SSL certificate to install and use for API ports",
          "type": "string"
        },
        "apiserver_keyfile": {
          "description": "api-server SSL key to use with certificate.",
          "type": "string"
        },
        "apiserver_cafile": {
          "description": "api-server SSL CA to use with the certificate and key provided - Required only if using privately signed certfile and keyfile",
          "type": "string"
        },
        "apiserver_insecure": {
          "description": "Whether to validate api-server SSL certificate.",
          "type": "boolean"
        },
        "redis_password": {
          "description": "Redis password.",
          "type": "string"
        },
        "analyticsdb_cassandra_user": {
          "description": "cassandra user to access analyticsdb",
          "type": "string"
        },
        "analyticsdb_cassandra_password": {
          "description": "cassandra password to access analyticsdb",
          "type": "string"
        },
        "analyticsdb_minimum_diskgb": {
          "description": "Minimum disk in GB for analytics DB",
          "type": "string"
        },
        "analyticsdb_cql_port": {
          "description": "Cassandra DB cql port for analytics DB",
          "type": "string"
        },
        "configdb_minimum_diskgb": {
          "description": "Minimum disk in GB for config DB",
          "type": "string"
        },
        "configdb_cql_port": {
          "description": "Cassandra DB cql port for config DB",
          "type": "string"
        },
        "neutron_metadata_ip": {
          "description": "IP of metadata server",
          "type": "string"
        },
        "neutron_metadata_port": {
          "description": "Port of metadata server",
          "type": "string"
        }
      }
    },
    "keystone_config": {
      "id": "keystone",
      "type": "object",
      "description": "Controller configuration KEYSTONE section",
      "additionalProperties": false,
      "properties": {
        "version": {
          "description": "Keystone version to be used",
          "type": "string",
          "enum": [
            "v2.0",
            "v3"
          ]
        },
        "ip": {
          "description": "Ip address of the host running keystone",
          "type": "string"
        },
        "admin_port": {
          "description": "Keystone admin port in which the keystone is listening, default 35357",
          "type": "string"
        },
        "public_port": {
          "description": "Keystone public port in which the keystone is listening default 5000",
          "type": "string"
        },
        "auth_protocol": {
          "description": "Keystone auth protocol",
          "type": "string",
          "enum": [
            "http",
            "https"
          ]
        },
        "admin_user": {
          "description": "Keystone admin user",
          "type": "string"
        },
        "admin_password": {
          "description": "Keystone admin password",
          "type": "string"
        },
        "admin_tenant": {
          "description": "Keystone admin tenant",
          "type": "string"
        },
        "certfile": {
          "description": "Keystone SSL certificate to install and use for API ports",
          "type": "string"
        },
        "keyfile": {
          "description": "Keystone SSL key to use with certificate.",
          "type": "string"
        },
        "cafile": {
          "description": "Keystone SSL CA to use with the certificate and key provided - Required only if using privately signed certfile and keyfile",
          "type": "string"
        },
        "insecure": {
          "description": "Whether to validate Keystone SSL certificate.",
          "type": "boolean"
        },
        "user_domain_name": {
          "description": "User domain name for keystone v3",
          "type": "string"
        },
        "project_domain_name": {
          "description": "Project domain name for keystone v3",
          "type": "string"
        }
      }
    },
    "rabbitmq_config": {
      "id": "rabbitmq",
      "type": "object",
      "description": "rabbitmq specific configurations",
      "additionalProperties": false,
      "properties": {
        "user": {
          "description": "Rabbit username to access rabbitmq",
          "type": "string"
        },
        "password": {
          "description": "Rabbit password to access rabbitmq",
          "type": "string"
        },
        "vhost": {
          "description": "vhost for rabbitmq",
          "type": "string"
        },
        "owner": {
          "description": "rabbitmq owner",
          "type": "string"
        },
        "group": {
          "description": "rabbitmq group",
          "type": "string"
        },
        "port": {
          "description": "rabbitmq listen port.",
          "type": "string"
        },
        "ssl": {
          "description": "Enable rabbitmq ssl",
          "type": "boolean"
        },
        "cacert": {
          "description": "rabbitmq ssl cacert",
          "type": "string"
        },
        "server_key": {
          "description": "rabbitmq ssl server key",
          "type": "string"
        },
        "server_cert": {
          "description": "rabbitmq ssl server cert",
          "type": "string"
        },
        "ssl_port": {
          "description": "rabbitmq ssl listen port.",
          "type": "string"
        },
        "ha_queues": {
          "description": "Highly Available (Mirrored) Queues.",
          "type": "boolean"
        }
      }
    }
  }
}
